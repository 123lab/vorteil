// Code generated by go-bindata.
// sources:
// vorteil.gpg
// DO NOT EDIT!

package vkern

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _vorteilGpg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x95\xb9\x16\xaa\x4a\x02\x45\x73\xbe\xe2\xe6\xac\x5e\x4c\xa2\x10\x74\x50\x40\x09\x54\x31\x0b\x25\x98\x81\x4c\x32\x8b\xa0\xc0\xd7\xf7\xea\xfb\xf2\x77\xd2\xb3\xa3\x9d\xec\xff\xfc\x7f\x0a\xd4\x4d\xe7\x8f\xa7\x7b\x7f\xbc\x48\xb1\x4c\xf5\x0f\x86\xc9\x1f\xc5\x72\x55\xfc\xf7\xa6\xa8\xde\x87\x8e\x72\x6d\x59\xf1\x2b\x29\x2a\x50\xd9\xf0\xd7\x26\xe4\x28\x47\xb5\x1a\x1d\xa3\x61\xd4\x40\xd8\x3e\x71\x95\xf9\x32\x51\x49\xe2\x18\xb5\x67\x5a\x32\xdc\xf3\xd7\x79\x8f\xb4\x31\xe1\x36\x0a\xd9\xa6\xce\xce\x55\x10\xe2\x51\x4a\x09\x7b\x9a\xa3\xee\xfb\x18\x71\x65\xb2\x69\xd6\xb3\xfd\x47\xb5\xd8\x8c\x4e\x70\x37\x26\x9f\x72\x2c\xd7\x13\xae\x2a\xdc\x7f\x33\x32\xcf\x7b\xec\xc1\x09\x51\x48\x44\x23\xdf\x7e\xee\x3f\x0d\xf8\xcb\xf3\xf1\x20\xbc\x36\xf5\x76\xf7\x45\x5e\x21\xac\x0d\xb7\xb5\x8e\x5c\x62\x4e\xb4\x5c\xf6\xbe\x72\x33\x30\x85\x1b\xf3\xe4\x0f\x8d\x4d\x8d\x47\x40\xef\xf8\xa0\x64\x78\x2f\x6d\x76\xe5\x86\x6f\xc7\x82\x58\x68\xda\xc5\x84\x38\x4b\x81\x84\x57\xff\xd9\x3b\x27\x1c\xdf\xaf\x0d\xef\x95\x83\x3d\xbe\x7b\xeb\x0a\xc3\x7b\x1b\xbe\xf8\xc7\x7a\x48\x5b\xd6\xb1\x1d\xa2\x4a\xf4\x70\xe2\xed\x35\x2e\x05\x38\xbc\xf2\xc9\x67\xb9\x37\x27\x5a\xa1\xad\x43\xf1\x7a\xfb\x56\xff\xce\x87\x3c\x78\xbf\xae\xea\x45\xe1\x99\x7b\x67\x79\xfe\xa7\xe5\x87\x13\xf3\xa8\x37\x7a\x23\x29\x4f\xd9\x52\x12\x0f\x87\xe8\xce\x1b\x6f\x3f\x63\xa7\x58\x46\xdb\xc3\xf9\xba\x8c\x5f\x08\xbd\x4f\x1e\xbd\x41\x33\x01\x05\x2a\x00\xe8\x2c\x26\xce\xf4\xe4\xe1\x42\x74\xd2\xa4\xaa\xe2\xe7\x46\x5b\x51\xa1\x11\xb4\xa6\xb6\x1d\x79\xac\xfc\x32\x01\xb1\xbe\xf1\x0f\x94\xff\x85\xc4\x26\xe3\x59\xfa\xe5\x43\x41\x51\x6c\x45\x05\xa0\x56\x7c\xf4\x70\xdc\x8c\x01\xf5\x47\x53\xfc\x0f\xa2\x54\xf0\x54\x95\x3a\x32\x55\x7f\xb4\x40\xe5\xdf\x41\x65\x2b\xa0\x3e\x29\xa0\x2e\x00\x00\x23\x82\xae\xb0\x30\x5f\x32\x2c\x51\x78\x3a\x7f\x58\x83\x11\xb0\x28\x39\xf2\xf9\x5d\x97\xa6\x8a\x10\xa1\x70\xef\x4e\xad\x74\xf9\xec\xb2\x7a\x90\xe3\x64\x3a\x86\x6c\x59\x0a\x19\x03\xa3\x53\x6a\x29\xc8\xbb\x6c\xeb\xd8\x00\x3d\x3b\x66\x6c\x8b\x40\x3e\xa3\xf4\x6a\xc8\x55\x03\xbb\x76\xe4\xe9\xb3\xbb\x51\x67\x0c\x77\xc9\x1b\xf7\x6b\xfd\x75\xbb\xd1\x70\xfa\x5b\x5a\x8c\x6d\xc7\x4b\xfb\xbc\x1e\x4f\xa2\xe6\x4d\x2a\x22\x24\xd6\xa8\xb6\x76\x3a\xf7\x19\xd7\x49\xcc\xf0\xd1\x6d\x2d\x86\xe8\xc2\x8f\x31\x25\xb2\x3f\x46\x03\xae\x45\x17\xfd\x65\x64\x3b\xbf\xbd\x9e\x7d\xe9\x78\x0b\xdc\x12\x55\x99\x8c\xce\xb3\x8c\x58\xf6\xd6\x2f\x43\x5e\x1c\xe6\x6f\x7a\x13\x1b\x8a\x35\x11\x8e\x2a\x23\x28\x3a\xd2\x8d\xf2\xcb\x6f\xde\x56\xa6\xa9\x33\x67\x3a\x19\x19\xaf\xaf\xb6\xee\xcc\x5a\xe2\x06\x81\xa4\x60\x59\x44\xa7\xeb\x55\x6d\x6a\xf3\xee\x55\x7d\x1d\x71\x3a\xb3\x2c\x64\x4d\x24\x77\x7e\x95\x9a\xc8\x48\x07\x35\x65\x42\xf7\xbe\xa2\xe2\x42\x7e\xad\xcf\xf4\x73\x2e\x47\x48\x0e\x7b\xfc\x53\x2b\x91\x64\xf8\x14\xe3\xce\x13\x7b\xae\xb0\xf2\xce\x18\xb9\x2a\xbc\xc5\x4e\xb3\x26\xc3\x6d\x86\xd7\xdf\x23\xd3\x08\x35\xec\x41\x06\xd3\x54\x04\x3e\x0b\xef\x61\xd8\x33\x3f\x68\x02\xcc\x28\x6f\xdb\xf8\x06\x81\x9c\x8e\x27\xb8\x4a\xf2\xb0\x2a\xc8\xda\xf5\x91\x8e\xdb\x83\xdf\x5a\x56\x35\x36\x41\xea\xc9\x30\x4c\xd4\xb2\xdc\x89\xde\x7d\x46\xfc\x1a\xdc\x7a\x9c\xfa\x66\xf9\xa1\x97\x14\x18\x8a\xaf\x5c\x85\xe9\xda\x66\x0a\x61\xe2\xa9\x5c\x67\xce\x06\xe8\x3e\x39\xd1\x7e\x52\x1e\x16\x9d\x19\x1f\x47\xad\x0c\x02\x29\x37\x0d\x8f\x5f\x67\x5d\xad\x57\x91\x94\xa3\x4d\x17\x3d\xd4\xd9\xef\x85\x5f\xba\xc2\x3a\x47\x2f\xf9\xf9\x9c\x07\xee\x2b\xac\x9c\x79\x53\x0e\xc9\x7a\x81\xdb\x02\x30\xce\x57\x46\x58\xbf\x28\xb8\xbf\x29\x6d\xbe\x29\x85\x27\xbb\x2f\x39\x42\xd2\x50\xbe\x80\x94\x0c\x5f\x49\x21\xe0\xae\xf1\x9c\xe7\xfa\x32\xee\x95\xc4\x25\x33\x97\x5e\x98\x8d\x9d\xa3\x02\x68\xf4\x75\xcd\xb4\x21\x8f\x82\xf4\x10\x31\xc5\xaf\x55\x83\x43\xed\xb8\xfa\xda\x5c\xfe\x98\x83\xf7\x2e\x10\x84\xc8\x77\x2e\xfd\x70\xa4\xbd\x9a\x9f\xa1\x59\x7e\xa2\x44\x74\x8e\x43\x2c\xed\x71\xba\xd5\xe9\x73\xce\x38\x7b\x5a\x04\x3b\xb8\xd4\x14\x37\x49\x5b\x79\x47\xc9\x9e\x9e\x7f\xf2\x88\x4d\x1e\x07\x3f\xfe\x25\x05\x11\x8b\x60\x94\xa6\x93\x71\xd9\x89\x01\xbd\x3a\x82\x12\x80\x3e\x04\x20\x69\x15\xe3\xe7\x27\xc0\xaf\x80\xea\x47\x2a\xf5\x8f\x79\x33\xd3\x00\xc0\x6a\xa0\x2d\x97\xf2\xc2\x3d\x2e\x04\xd2\x70\xbf\x29\x0c\x9b\x68\x55\x67\x9c\x82\xd1\xd4\x9f\x74\xdd\xcc\x1f\xde\x3f\xae\x38\xe0\x4b\x45\x5b\xc7\x66\xe2\xf8\x88\x22\x79\xac\xf2\x34\xfa\xf9\x41\xaa\x89\xe7\x36\xe5\xd5\x5c\xb2\x50\x01\xb7\x92\x4d\x7a\xff\x72\xeb\xa6\xe3\xc1\x19\xeb\xc5\x49\xc3\x9a\x8c\x23\x36\xe4\x67\x61\xc0\xb7\x37\x87\x34\xf2\x10\x6c\xa8\xe1\xad\x65\x42\xdc\x44\xa7\xfc\x5e\xe5\xbc\xcc\xc2\xe0\x5c\xc0\xc5\x85\xe2\x09\x24\xb6\x1e\x3d\xd6\x5d\xb7\xd6\x30\xef\x4a\xf6\xc3\x71\xf7\xc6\x29\xfd\x02\xc4\x5c\x83\x3e\x24\x72\x5d\xa7\xcb\x28\x05\x98\x37\x35\xfe\x1a\xeb\xcb\xbc\x71\x83\x70\x92\x69\x95\xe4\xf6\x33\xb7\x02\x15\x9a\x4c\xdc\xea\xa1\xfe\xf4\x1e\x13\x1f\xee\xa3\x6c\x9c\x1b\xe6\x0b\xce\x38\xf7\x4c\x87\x3e\xee\x57\x97\x05\x3c\xe5\xc6\xe4\x05\x88\x9b\xf3\x42\x50\x7c\x5b\xdc\xf8\x47\x00\x96\x76\x3f\xb6\x54\xb6\x06\x3d\x8d\x0c\x20\x4d\x5f\xee\x31\x85\x26\xf7\xa1\x7d\xa7\xb7\x1e\x93\x59\xcb\xac\x93\xa2\xbd\x60\x25\x4f\xa5\x8c\x93\x5e\xda\xf3\x0f\x68\x6e\xc6\xc7\xba\x20\x14\xed\x39\xd7\x38\xb0\xed\x2a\x27\xa3\xee\x74\x4f\x44\x82\xa5\xeb\xfb\xa9\x2f\xc1\x02\x17\xc1\x78\xe4\x84\xa6\xfe\x2b\xfa\xf5\x87\xfa\x5b\x16\xe8\x68\xff\x92\x9d\xff\x05\x00\x00\xff\xff\x69\x71\x4e\xf3\x9c\x06\x00\x00")

func vorteilGpgBytes() ([]byte, error) {
	return bindataRead(
		_vorteilGpg,
		"vorteil.gpg",
	)
}

func vorteilGpg() (*asset, error) {
	bytes, err := vorteilGpgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vorteil.gpg", size: 1692, mode: os.FileMode(436), modTime: time.Unix(1499046594, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func getAsset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func mustGetAsset(name string) []byte {
	a, err := getAsset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func getAssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func getAssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"vorteil.gpg": vorteilGpg,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func getAssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"vorteil.gpg": &bintree{vorteilGpg, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func getRestoreAsset(dir, name string) error {
	data, err := getAsset(name)
	if err != nil {
		return err
	}
	info, err := getAssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func getRestoreAssets(dir, name string) error {
	children, err := getAssetDir(name)
	// File
	if err != nil {
		return getRestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = getRestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
